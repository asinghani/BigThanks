{"version":3,"sources":["meteor://ðŸ’»app/packages/vazco_universe-html-purifier/packages/vazco_universe-html-purifier.js"],"names":[],"mappingsfile":"/packages/vazco_universe-html-purifier.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vazco:universe-html-purifier/HTMLParser.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*                                                                                                                    // 1\n * HTML Parser By John Resig (ejohn.org)                                                                              // 2\n * Original code by Erik Arvidsson, Licensed under the Apache License, Version 2.0 or Mozilla Public License          // 3\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js                                                           // 4\n                                                                                                                      // 5\n * added support of HTML5 by Krzysztof RÃ³Å¼alski <cristo.rabani@gmail.com>                                             // 6\n */                                                                                                                   // 7\n                                                                                                                      // 8\n// Regular Expressions for parsing tags and attributes (modified attribute name matcher, to catch xml:lang)           // 9\nvar startTag = /^<([\\w-]+\\:?\\w*)((?:\\s+[a-zA-Z_:-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/,      // 10\n\tendTag = /^<\\/([\\w-]+)[^>]*>/,                                                                                       // 11\n\tattr = /([\\w-]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;                             // 12\n                                                                                                                      // 13\nfunction makeMap(str){                                                                                                // 14\n\tvar obj = {}, items = str.split(\",\");                                                                                // 15\n\tfor ( var i = 0; i < items.length; i++ )                                                                             // 16\n\t\tobj[ items[i] ] = true;                                                                                             // 17\n\treturn obj;                                                                                                          // 18\n}                                                                                                                     // 19\n                                                                                                                      // 20\nvar empty = makeMap(\"area,base,basefont,br,col,frame,hr,img,input,isindex,keygen,link,meta,menuitem,source,track,param,embed,wbr\");\n                                                                                                                      // 22\nvar block = makeMap(\"article,aside,address,applet,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,form,footer,frameset,hr,iframe,header,hgroup,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,progress,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video\");\n                                                                                                                      // 24\nvar inline = makeMap(\"a,abbr,acronym,applet,audio,b,basefont,bdo,big,br,button,cite,code,command,del,details,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,mark,meter,nav,object,q,s,samp,script,select,small,span,strike,strong,sub,summary,sup,textarea,tt,u,time,var\");\n                                                                                                                      // 26\n// Elements that you can, intentionally, leave open                                                                   // 27\n// (and which close themselves)                                                                                       // 28\nvar closeSelf = makeMap(\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr\");                                          // 29\n                                                                                                                      // 30\n// Attributes that have their values filled in disabled=\"disabled\"                                                    // 31\nvar fillAttrs = makeMap(\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\");\n                                                                                                                      // 33\n// Special Elements (can contain anything)                                                                            // 34\nvar special = makeMap(\"script,style\");                                                                                // 35\n                                                                                                                      // 36\nHTMLParser = function( html, handler ) {                                                                              // 37\n\tvar index, chars, match, stack = [], last = html;                                                                    // 38\n\tstack.last = function(){                                                                                             // 39\n\t\treturn this[ this.length - 1 ];                                                                                     // 40\n\t};                                                                                                                   // 41\n                                                                                                                      // 42\n\tfunction parseStartTag( tag, tagName, rest, unary ) {                                                                // 43\n\t\tif ( block[ tagName ] ) {                                                                                           // 44\n\t\t\twhile ( stack.last() && inline[ stack.last() ] ) {                                                                 // 45\n\t\t\t\tparseEndTag( \"\", stack.last() );                                                                                  // 46\n\t\t\t}                                                                                                                  // 47\n\t\t}                                                                                                                   // 48\n                                                                                                                      // 49\n\t\tif ( closeSelf[ tagName ] && stack.last() === tagName ) {                                                           // 50\n\t\t\tparseEndTag( \"\", tagName );                                                                                        // 51\n\t\t}                                                                                                                   // 52\n                                                                                                                      // 53\n\t\tunary = empty[ tagName ] || !!unary;                                                                                // 54\n                                                                                                                      // 55\n\t\tif ( !unary )                                                                                                       // 56\n\t\t\tstack.push( tagName );                                                                                             // 57\n                                                                                                                      // 58\n\t\tif ( handler.start ) {                                                                                              // 59\n\t\t\tvar attrs = [];                                                                                                    // 60\n                                                                                                                      // 61\n\t\t\trest.replace(attr, function(match, name) {                                                                         // 62\n\t\t\t\tvar value = arguments[2] ? arguments[2] :                                                                         // 63\n\t\t\t\t\targuments[3] ? arguments[3] :                                                                                    // 64\n\t\t\t\t\targuments[4] ? arguments[4] :                                                                                    // 65\n\t\t\t\t\tfillAttrs[name] ? name : \"\";                                                                                     // 66\n                                                                                                                      // 67\n\t\t\t\tattrs.push({                                                                                                      // 68\n\t\t\t\t\tname: name,                                                                                                      // 69\n\t\t\t\t\tvalue: value,                                                                                                    // 70\n\t\t\t\t\tescaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\\\"') //\"                                                              // 71\n\t\t\t\t});                                                                                                               // 72\n\t\t\t});                                                                                                                // 73\n                                                                                                                      // 74\n\t\t\tif ( handler.start )                                                                                               // 75\n\t\t\t\thandler.start( tagName, attrs, unary );                                                                           // 76\n\t\t}                                                                                                                   // 77\n\t}                                                                                                                    // 78\n                                                                                                                      // 79\n\tfunction parseEndTag( tag, tagName ) {                                                                               // 80\n\t\tvar pos;                                                                                                            // 81\n                                                                                                                      // 82\n\t\t// If no tag name is provided, clean shop                                                                           // 83\n\t\tif (!tagName) {                                                                                                     // 84\n\t\t\tpos = 0;                                                                                                           // 85\n\t\t}                                                                                                                   // 86\n                                                                                                                      // 87\n\t\t// Find the closest opened tag of the same type                                                                     // 88\n\t\telse                                                                                                                // 89\n\t\t\tfor ( pos = stack.length - 1; pos >= 0; pos-- )                                                                    // 90\n\t\t\t\tif ( stack[ pos ] === tagName )                                                                                   // 91\n\t\t\t\t\tbreak;                                                                                                           // 92\n                                                                                                                      // 93\n\t\tif ( pos >= 0 ) {                                                                                                   // 94\n\t\t\t// Close all the open elements, up the stack                                                                       // 95\n\t\t\tfor ( var i = stack.length - 1; i >= pos; i-- )                                                                    // 96\n\t\t\t\tif ( handler.end )                                                                                                // 97\n\t\t\t\t\thandler.end( stack[ i ] );                                                                                       // 98\n                                                                                                                      // 99\n\t\t\t// Remove the open elements from the stack                                                                         // 100\n\t\t\tstack.length = pos;                                                                                                // 101\n\t\t}                                                                                                                   // 102\n\t}                                                                                                                    // 103\n                                                                                                                      // 104\n\twhile ( html ) {                                                                                                     // 105\n\t\tchars = true;                                                                                                       // 106\n\t\t// Make sure we're not in a script or style element                                                                 // 107\n\t\tif ( !stack.last() || !special[ stack.last() ] ) {                                                                  // 108\n                                                                                                                      // 109\n\t\t\t// Comment                                                                                                         // 110\n\t\t\tif ( html.indexOf(\"<!--\") === 0 ) {                                                                                // 111\n\t\t\t\tindex = html.indexOf(\"-->\");                                                                                      // 112\n                                                                                                                      // 113\n\t\t\t\tif ( index >= 0 ) {                                                                                               // 114\n\t\t\t\t\tif ( handler.comment )                                                                                           // 115\n\t\t\t\t\t\thandler.comment( html.substring( 4, index ) );                                                                  // 116\n\t\t\t\t\thtml = html.substring( index + 3 );                                                                              // 117\n\t\t\t\t\tchars = false;                                                                                                   // 118\n\t\t\t\t}                                                                                                                 // 119\n                                                                                                                      // 120\n\t\t\t// end tag                                                                                                         // 121\n\t\t\t} else if ( html.indexOf(\"</\") === 0 ) {                                                                           // 122\n\t\t\t\tmatch = html.match( endTag );                                                                                     // 123\n                                                                                                                      // 124\n\t\t\t\tif ( match ) {                                                                                                    // 125\n\t\t\t\t\thtml = html.substring( match[0].length );                                                                        // 126\n\t\t\t\t\tmatch[0].replace( endTag, parseEndTag );                                                                         // 127\n\t\t\t\t\tchars = false;                                                                                                   // 128\n\t\t\t\t}                                                                                                                 // 129\n                                                                                                                      // 130\n\t\t\t// start tag                                                                                                       // 131\n\t\t\t} else if ( html.indexOf(\"<\") === 0 && !/^(<)[^>]*(?:<|$)/gm.test(html)) {                                         // 132\n\t\t\t\tmatch = html.match( startTag );                                                                                   // 133\n                                                                                                                      // 134\n\t\t\t\tif ( match ) {                                                                                                    // 135\n\t\t\t\t\thtml = html.substring( match[0].length );                                                                        // 136\n\t\t\t\t\tmatch[0].replace( startTag, parseStartTag );                                                                     // 137\n\t\t\t\t\tchars = false;                                                                                                   // 138\n\t\t\t\t}                                                                                                                 // 139\n\t\t\t}                                                                                                                  // 140\n                                                                                                                      // 141\n\t\t\tif ( chars ) {                                                                                                     // 142\n\t\t\t\tindex = html.indexOf(\"<\");                                                                                        // 143\n\t\t\t\tif(/(<)[^>]*(?:<|$)/gm.test(html)){                                                                               // 144\n\t\t\t\t\tindex = html.search(/(<)[^>]*(?:<|$)/gm)+1;                                                                      // 145\n\t\t\t\t}                                                                                                                 // 146\n\t\t\t\tvar text = index < 0 ? html : html.substring( 0, index );                                                         // 147\n\t\t\t\thtml = index < 0 ? \"\" : html.substring( index );                                                                  // 148\n                                                                                                                      // 149\n\t\t\t\tif ( handler.chars )                                                                                              // 150\n\t\t\t\t\thandler.chars( text );                                                                                           // 151\n\t\t\t}                                                                                                                  // 152\n                                                                                                                      // 153\n\t\t} else {                                                                                                            // 154\n\t\t\thtml = html.replace(new RegExp(\"(.*)<\\/\" + stack.last() + \"[^>]*>\"), function(all, text){                          // 155\n\t\t\t\ttext = text.replace(/<!--(.*?)-->/g, \"$1\")                                                                        // 156\n\t\t\t\t\t.replace(/<!\\[CDATA\\[(.*?)]]>/g, \"$1\");                                                                          // 157\n                                                                                                                      // 158\n\t\t\t\tif ( handler.chars )                                                                                              // 159\n\t\t\t\t\thandler.chars( text );                                                                                           // 160\n                                                                                                                      // 161\n\t\t\t\treturn \"\";                                                                                                        // 162\n\t\t\t});                                                                                                                // 163\n                                                                                                                      // 164\n\t\t\tparseEndTag( \"\", stack.last() );                                                                                   // 165\n\t\t}                                                                                                                   // 166\n                                                                                                                      // 167\n\t\tif ( html === last )                                                                                                // 168\n\t\t\tthrow \"Parse Error: \" + html;                                                                                      // 169\n\t\tlast = html;                                                                                                        // 170\n\t}                                                                                                                    // 171\n                                                                                                                      // 172\n\t// Clean up any remaining tags                                                                                       // 173\n\tparseEndTag();                                                                                                       // 174\n};                                                                                                                    // 175\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vazco:universe-html-purifier/HTMLPurifier.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n'use strict';                                                                                                         // 1\n                                                                                                                      // 2\nvar htmlPurifier = function(settings){                                                                                // 3\n    var allowHeaders = true;                                                                                          // 4\n    var stack = [];                                                                                                   // 5\n    var active_elements = [];                                                                                         // 6\n    var customTags = {};                                                                                              // 7\n    var noTextManhandle = false;                                                                                      // 8\n    var encodeHtmlEntities = false;                                                                                   // 9\n    var root;                                                                                                         // 10\n    var insertion_mode;                                                                                               // 11\n    var noFormatting;                                                                                                 // 12\n    var preferB_I = false;                                                                                            // 13\n    var preferStrong_Em = false;                                                                                      // 14\n    var withoutTags;                                                                                                  // 15\n                                                                                                                      // 16\n                                                                                                                      // 17\n    var scope_markers = {'td': true, 'th': true, 'caption': true};                                                    // 18\n    var tags_with_implied_end = {'li': true, 'p': true};                                                              // 19\n    var allowed_attributes = {                                                                                        // 20\n        all_elements: ['class', 'style', 'id'],                                                                       // 21\n        a: ['href', 'target', 'title', 'name', 'rel', 'rev', 'type'],                                                 // 22\n        blockquote: ['cite'],                                                                                         // 23\n        img: ['src', 'alt', 'title', 'longdesc'],                                                                     // 24\n        td: ['colspan'],                                                                                              // 25\n        th: ['colspan'],                                                                                              // 26\n        tr: ['rowspan'],                                                                                              // 27\n        table: ['border']                                                                                             // 28\n    };                                                                                                                // 29\n    var allowed_attributes_as_hash;                                                                                   // 30\n    var selfClosing = {                                                                                               // 31\n        br: true,                                                                                                     // 32\n        hr: true,                                                                                                     // 33\n        img: true                                                                                                     // 34\n    };                                                                                                                // 35\n    var dontIndent = {                                                                                                // 36\n        strong: true,                                                                                                 // 37\n        b: true,                                                                                                      // 38\n        i: true,                                                                                                      // 39\n        em: true,                                                                                                     // 40\n        pre: true                                                                                                     // 41\n    };                                                                                                                // 42\n    var indent = false;                                                                                               // 43\n    var indent_string = \"    \";                                                                                       // 44\n    var indentation = function (depth, switchOff) {                                                                   // 45\n        if (noFormatting) return \"\";                                                                                  // 46\n        if (!indent) return \"\";                                                                                       // 47\n        if (switchOff) indent = false;                                                                                // 48\n        var result = \"\\n\";                                                                                            // 49\n        for (var i = 0; i < depth; i++) {                                                                             // 50\n            result += indent_string;                                                                                  // 51\n        }                                                                                                             // 52\n        return result;                                                                                                // 53\n    };                                                                                                                // 54\n                                                                                                                      // 55\n    var TextNode = function (text) {                                                                                  // 56\n        this.text = noTextManhandle ? text : text.replace(/\\s+/g, ' ');                                               // 57\n    };                                                                                                                // 58\n                                                                                                                      // 59\n    TextNode.prototype = {                                                                                            // 60\n        isEmpty: function () {                                                                                        // 61\n            return !this.text;                                                                                        // 62\n        },                                                                                                            // 63\n        textContent: function () {                                                                                    // 64\n            return this.text;                                                                                         // 65\n        },                                                                                                            // 66\n        toString: function () {                                                                                       // 67\n            return this.isEmpty() ? '' : indentation(this.depth(), true) + this.text.replace(/(&nbsp;)+/, ' ');       // 68\n        },                                                                                                            // 69\n        depth: function () {                                                                                          // 70\n            return this.parent.depth() + 1;                                                                           // 71\n        }                                                                                                             // 72\n    };                                                                                                                // 73\n                                                                                                                      // 74\n    var Node = function (name) {                                                                                      // 75\n        this.name = name;                                                                                             // 76\n        this.children = [];                                                                                           // 77\n        this.attributes = {};                                                                                         // 78\n    };                                                                                                                // 79\n                                                                                                                      // 80\n    Node.prototype = {                                                                                                // 81\n        appendChild: function (child) {                                                                               // 82\n            this.children.push(child);                                                                                // 83\n            child.parent = this;                                                                                      // 84\n            return child;                                                                                             // 85\n        },                                                                                                            // 86\n        removeChild: function (child) {                                                                               // 87\n            for (var i = 0, len = this.children.length; i < len; i++) {                                               // 88\n                if (this.children[i] === child) {                                                                     // 89\n                    return this.children.splice(i, i);                                                                // 90\n                }                                                                                                     // 91\n            }                                                                                                         // 92\n            return null;                                                                                              // 93\n        },                                                                                                            // 94\n        lastChild: function () {                                                                                      // 95\n            return this.children[this.children.length - 1];                                                           // 96\n        },                                                                                                            // 97\n        clone: function () {                                                                                          // 98\n            var clone = new Node(this.name);                                                                          // 99\n            for (var i in this.attributes) {                                                                          // 100\n                clone.attributes[i] = this.attributes[i];                                                             // 101\n            }                                                                                                         // 102\n            return clone;                                                                                             // 103\n        },                                                                                                            // 104\n        startTag: function () {                                                                                       // 105\n            return \"<\" + this.name + this.attributeString() + \">\";                                                    // 106\n        },                                                                                                            // 107\n        endTag: function () {                                                                                         // 108\n            return \"</\" + this.name + \">\";                                                                            // 109\n        },                                                                                                            // 110\n        selfClosingTag: function () {                                                                                 // 111\n            return \"<\" + this.name + this.attributeString() + \"/>\";                                                   // 112\n        },                                                                                                            // 113\n        attributeString: function () {                                                                                // 114\n            var string = \"\";                                                                                          // 115\n                                                                                                                      // 116\n            var allowed_for_tag = allowed_attributes_as_hash[this.name] || {};                                        // 117\n            var allowed_for_all = allowed_attributes_as_hash['all_elements'] || {};                                   // 118\n                                                                                                                      // 119\n            for (var i = 0, len = (this.attributes || []).length; i < len; i++) {                                     // 120\n                var name = this.attributes[i].name;                                                                   // 121\n                var value = this.attributes[i].value;                                                                 // 122\n                if ((allowed_for_tag[name] || allowed_for_all[name]) && value) {                                      // 123\n                    if (name === 'href') {                                                                            // 124\n                        // don't allow links to anywhere other than http(s)                                           // 125\n                        // because they could contain JavaScript (javascript:) or other bad things!                   // 126\n                        var permittedRegex = /(?:^https?:\\/\\/)|(?:^\\/[^:\\\\;\\(\\)\"']*$)|(?:^s?ftps?:\\/\\/)|(?:^#[^\\/]*)|(?:^mailto:)/i;\n                        if (!permittedRegex.test(value) || /script:/.test(value)) {                                   // 128\n                            // if not allowed, set the attribute to be empty                                          // 129\n                            value = '';                                                                               // 130\n                        }                                                                                             // 131\n                    }                                                                                                 // 132\n                                                                                                                      // 133\n                    string += \" \" + name + \"=\\\"\" + value + \"\\\"\";                                                      // 134\n                }                                                                                                     // 135\n            }                                                                                                         // 136\n            return string;                                                                                            // 137\n        },                                                                                                            // 138\n        innerHTML: function () {                                                                                      // 139\n            var string = \"\";                                                                                          // 140\n            for (var i = 0, len = this.children.length; i < len; i++) {                                               // 141\n                string += this.children[i];                                                                           // 142\n            }                                                                                                         // 143\n            return string;                                                                                            // 144\n        },                                                                                                            // 145\n        textContent: function () {                                                                                    // 146\n            var text = \"\";                                                                                            // 147\n            for (var i = 0, len = this.children.length; i < len; i++) {                                               // 148\n                if (this.children[i] instanceof TextNode) {                                                           // 149\n                    text += this.children[i].text;                                                                    // 150\n                }                                                                                                     // 151\n            }                                                                                                         // 152\n            return text;                                                                                              // 153\n        },                                                                                                            // 154\n        toString: function () {                                                                                       // 155\n            if (this.isEmpty()) return '';                                                                            // 156\n                                                                                                                      // 157\n            var string = \"\";                                                                                          // 158\n            if (selfClosing[this.name]) {                                                                             // 159\n                string = indentation(this.depth(), true) + this.selfClosingTag();                                     // 160\n            } else {                                                                                                  // 161\n                indent = dontIndent[this.name] ? indent : true;                                                       // 162\n                string = indentation(this.depth(), dontIndent[this.name]) + this.startTag() + this.innerHTML();       // 163\n                indent = dontIndent[this.name] ? indent : true;                                                       // 164\n                string += indentation(this.depth()) + this.endTag();                                                  // 165\n            }                                                                                                         // 166\n            return string;                                                                                            // 167\n        },                                                                                                            // 168\n        depth: function () {                                                                                          // 169\n            return this.parent ? this.parent.depth() + 1 : -1;                                                        // 170\n        },                                                                                                            // 171\n        isEmpty: function () {                                                                                        // 172\n            // Zaption mod: self-closing elements never count as empty                                                // 173\n            // otherwise <p><br/></p> gets removed entirely                                                           // 174\n            if (selfClosing[this.name]) {                                                                             // 175\n                return false;                                                                                         // 176\n            }                                                                                                         // 177\n                                                                                                                      // 178\n            if (typeof(this._isEmpty) === \"undefined\") {                                                              // 179\n                this._isEmpty = true;                                                                                 // 180\n                for (var i = 0, len = this.children.length; i < len; i++) {                                           // 181\n                    if (!this.children[i].isEmpty()) {                                                                // 182\n                        this._isEmpty = false;                                                                        // 183\n                        break;                                                                                        // 184\n                    }                                                                                                 // 185\n                }                                                                                                     // 186\n            }                                                                                                         // 187\n            return this._isEmpty;                                                                                     // 188\n        }                                                                                                             // 189\n    };                                                                                                                // 190\n                                                                                                                      // 191\n    function init(settings) {                                                                                         // 192\n        var modes = {                                                                                                 // 193\n            InBody: InBody,                                                                                           // 194\n            InCell: InCell,                                                                                           // 195\n            InRow: InRow,                                                                                             // 196\n            InTableBody: InTableBody,                                                                                 // 197\n            InColumnGroup: InColumnGroup,                                                                             // 198\n            InCaption: InCaption,                                                                                     // 199\n            InTable: InTable                                                                                          // 200\n        };                                                                                                            // 201\n        if(!settings.insertion_mode || !modes[settings.insertion_mode]){                                              // 202\n            settings.insertion_mode = 'InBody';                                                                       // 203\n        };                                                                                                            // 204\n        insertion_mode = modes[settings.insertion_mode];                                                              // 205\n        _.extend(allowed_attributes, settings.allowed_attributes);                                                    // 206\n        _.extend(customTags, settings.customTags);                                                                    // 207\n        _.extend(selfClosing, settings.selfClosingTags);                                                              // 208\n                                                                                                                      // 209\n        root = new Node('html');                                                                                      // 210\n        stack = [root];                                                                                               // 211\n        active_elements = [];                                                                                         // 212\n        allowed_attributes_as_hash = {};                                                                              // 213\n                                                                                                                      // 214\n                                                                                                                      // 215\n        var attr, i;                                                                                                  // 216\n        for (var key in allowed_attributes) {                                                                         // 217\n            allowed_attributes_as_hash[key] = {};                                                                     // 218\n            for (i in allowed_attributes['all_elements']) {                                                           // 219\n                attr = allowed_attributes['all_elements'][i];                                                         // 220\n                allowed_attributes_as_hash[key][attr] = true;                                                         // 221\n            }                                                                                                         // 222\n            if (key === 'all_elements') {                                                                             // 223\n                continue;                                                                                             // 224\n            }                                                                                                         // 225\n            for (i in allowed_attributes[key]) {                                                                      // 226\n                attr = allowed_attributes[key][i];                                                                    // 227\n                allowed_attributes_as_hash[key][attr] = true;                                                         // 228\n            }                                                                                                         // 229\n        }                                                                                                             // 230\n                                                                                                                      // 231\n        noFormatting = !!settings.noFormatting;                                                                       // 232\n        if(settings.noTextManhandle){                                                                                 // 233\n            noTextManhandle = true;                                                                                   // 234\n            noFormatting = true;                                                                                      // 235\n        }                                                                                                             // 236\n        encodeHtmlEntities = settings.encodeHtmlEntities;                                                             // 237\n        preferStrong_Em = !!settings.preferStrong_Em;                                                                 // 238\n        preferB_I = !preferStrong_Em && !!settings.preferB_I;                                                         // 239\n        allowHeaders = !settings.noHeaders;                                                                           // 240\n        withoutTags = {};                                                                                             // 241\n                                                                                                                      // 242\n        if(typeof settings.withoutTags === 'string' && settings.withoutTags){                                         // 243\n            settings.withoutTags = [settings.withoutTags];                                                            // 244\n        }                                                                                                             // 245\n                                                                                                                      // 246\n        if(settings.withoutTags && settings.withoutTags.length){                                                      // 247\n            for (var i = settings.withoutTags.length -1 ; i >= 0; i--) {                                              // 248\n                withoutTags[settings.withoutTags[i]] = true;                                                          // 249\n            }                                                                                                         // 250\n        }                                                                                                             // 251\n    }                                                                                                                 // 252\n                                                                                                                      // 253\n    function current_node() {                                                                                         // 254\n        return _.last(stack);                                                                                         // 255\n    }                                                                                                                 // 256\n                                                                                                                      // 257\n    function reconstruct_the_active_formatting_elements() {                                                           // 258\n        if (active_elements.length === 0 || _.contains(stack, _.last(active_elements))) {                             // 259\n            return;                                                                                                   // 260\n        }                                                                                                             // 261\n        var entry;                                                                                                    // 262\n        for (var i = active_elements.length; i > 0; i--) {                                                            // 263\n            entry = active_elements[i - 1];                                                                           // 264\n            if (_.contains(stack, entry)) {                                                                           // 265\n                break;                                                                                                // 266\n            }                                                                                                         // 267\n        }                                                                                                             // 268\n        do {                                                                                                          // 269\n            var clone = entry.clone();                                                                                // 270\n            current_node().appendChild(clone);                                                                        // 271\n            stack.push(clone);                                                                                        // 272\n            active_elements[i] = clone;                                                                               // 273\n            i += 1;                                                                                                   // 274\n        } while (i !== active_elements.length);                                                                       // 275\n    }                                                                                                                 // 276\n                                                                                                                      // 277\n    function has_element_with(arr_of_elements, tagName) {                                                             // 278\n        for (var i = arr_of_elements.length; i > 0; i--) {                                                            // 279\n            if (arr_of_elements[i - 1].name === tagName) {                                                            // 280\n                return true;                                                                                          // 281\n            }                                                                                                         // 282\n        }                                                                                                             // 283\n        return false;                                                                                                 // 284\n    }                                                                                                                 // 285\n                                                                                                                      // 286\n    function in_scope(tagName) {                                                                                      // 287\n        return has_element_with(stack, tagName);                                                                      // 288\n    }                                                                                                                 // 289\n                                                                                                                      // 290\n    function in_table_scope(tagName) {                                                                                // 291\n        for (var i = stack.length; i > 0; i--) {                                                                      // 292\n            var nodeTag = stack[i - 1].name;                                                                          // 293\n            if (nodeTag === tagName) {                                                                                // 294\n                return true;                                                                                          // 295\n            } else if (nodeTag === 'table' || nodeTag === 'html') {                                                   // 296\n                return false;                                                                                         // 297\n            }                                                                                                         // 298\n        }                                                                                                             // 299\n        return false;                                                                                                 // 300\n    }                                                                                                                 // 301\n                                                                                                                      // 302\n    function insert_html_element_for(tagName, attrs) {                                                                // 303\n        var node = new Node(tagName);                                                                                 // 304\n        node.attributes = attrs;                                                                                      // 305\n        current_node().appendChild(node);                                                                             // 306\n        stack.push(node);                                                                                             // 307\n        return node;                                                                                                  // 308\n    }                                                                                                                 // 309\n                                                                                                                      // 310\n    function generate_implied_end_tags(exception) {                                                                   // 311\n        var tagName = current_node().name;                                                                            // 312\n        while (tags_with_implied_end[tagName] && tagName !== exception) {                                             // 313\n            end(tagName);                                                                                             // 314\n            tagName = current_node().name;                                                                            // 315\n        }                                                                                                             // 316\n    }                                                                                                                 // 317\n                                                                                                                      // 318\n    function trim_to_1_space(str) {                                                                                   // 319\n        return noTextManhandle? str : str.replace(/^\\s+/, ' ').replace(/\\s+$/, ' ');                                  // 320\n    }                                                                                                                 // 321\n                                                                                                                      // 322\n    function clear_stack_to_table_context() {                                                                         // 323\n        clear_stack_to_context_by_tags(['table', 'html']);                                                            // 324\n    }                                                                                                                 // 325\n                                                                                                                      // 326\n    function clear_stack_to_table_body_context() {                                                                    // 327\n        clear_stack_to_context_by_tags(['tbody', 'tfoot', 'thead', 'html']);                                          // 328\n    }                                                                                                                 // 329\n                                                                                                                      // 330\n    function clear_stack_to_table_row_context() {                                                                     // 331\n        clear_stack_to_context_by_tags(['tr', 'html']);                                                               // 332\n    }                                                                                                                 // 333\n                                                                                                                      // 334\n    function clear_stack_to_context_by_tags(tags) {                                                                   // 335\n        while (!_.contains(tags, current_node().name)) {                                                              // 336\n            stack.pop();                                                                                              // 337\n        }                                                                                                             // 338\n    }                                                                                                                 // 339\n                                                                                                                      // 340\n    function clear_active_elements_to_last_marker() {                                                                 // 341\n        var entry;                                                                                                    // 342\n        do {                                                                                                          // 343\n            entry = active_elements.pop();                                                                            // 344\n        } while (!scope_markers[entry.name]);                                                                         // 345\n    }                                                                                                                 // 346\n                                                                                                                      // 347\n    function reset_insertion_mode() {                                                                                 // 348\n        var last = false;                                                                                             // 349\n        var node;                                                                                                     // 350\n        for (var i = stack.length - 1; i >= 0; i--) {                                                                 // 351\n            node = stack[i];                                                                                          // 352\n            if (node === stack[0]) {                                                                                  // 353\n                last = true;                                                                                          // 354\n            }                                                                                                         // 355\n            switch (node.name) {                                                                                      // 356\n                case 'th':                                                                                            // 357\n                case 'td':                                                                                            // 358\n                    if (!last) {                                                                                      // 359\n                        insertion_mode = InCell;                                                                      // 360\n                        return;                                                                                       // 361\n                    }                                                                                                 // 362\n                case 'tr':                                                                                            // 363\n                    insertion_mode = InRow;                                                                           // 364\n                    return;                                                                                           // 365\n                case 'tbody':                                                                                         // 366\n                case 'thead':                                                                                         // 367\n                case 'tfoot':                                                                                         // 368\n                    insertion_mode = InTableBody;                                                                     // 369\n                    return;                                                                                           // 370\n                case 'caption':                                                                                       // 371\n                    insertion_mode = InCaption;                                                                       // 372\n                    return;                                                                                           // 373\n                case 'colgroup':                                                                                      // 374\n                    insertion_mode = InColumnGroup;                                                                   // 375\n                    return;                                                                                           // 376\n                case 'table':                                                                                         // 377\n                    insertion_mode = InTable;                                                                         // 378\n                    return;                                                                                           // 379\n                default:                                                                                              // 380\n                    if (last) {                                                                                       // 381\n                        insertion_mode = InBody;                                                                      // 382\n                        return;                                                                                       // 383\n                    }                                                                                                 // 384\n            }                                                                                                         // 385\n        }                                                                                                             // 386\n    }                                                                                                                 // 387\n                                                                                                                      // 388\n    function close_the_cell() {                                                                                       // 389\n        if (in_table_scope('td')) {                                                                                   // 390\n            end('td');                                                                                                // 391\n        } else {                                                                                                      // 392\n            end('th');                                                                                                // 393\n        }                                                                                                             // 394\n    }                                                                                                                 // 395\n                                                                                                                      // 396\n    function start(tagName, attrs, unary) {                                                                           // 397\n        insertion_mode.insertion_mode_start(tagName, attrs, unary);                                                   // 398\n    }                                                                                                                 // 399\n                                                                                                                      // 400\n    function end(tagName) {                                                                                           // 401\n        insertion_mode.insertion_mode_end(tagName);                                                                   // 402\n    }                                                                                                                 // 403\n                                                                                                                      // 404\n    function chars(text) {                                                                                            // 405\n        if (typeof(text) === 'undefined') {                                                                           // 406\n            return;                                                                                                   // 407\n        }                                                                                                             // 408\n        text = noTextManhandle? text : text.replace(/\\n\\s*\\n\\s*\\n*/g, '\\n\\n').replace(/(^\\n\\n|\\n\\n$)/g, '');          // 409\n        text = !encodeHtmlEntities? text : text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n        var paragraphs = text.split('\\n\\n');                                                                          // 411\n        var trimmedText;                                                                                              // 412\n        if (paragraphs.length > 1) {                                                                                  // 413\n            for (var i in paragraphs) {                                                                               // 414\n                start('p');                                                                                           // 415\n                reconstruct_the_active_formatting_elements();                                                         // 416\n                trimmedText = trim_to_1_space(paragraphs[i]);                                                         // 417\n                current_node().appendChild(new TextNode(trimmedText));                                                // 418\n                end('p');                                                                                             // 419\n            }                                                                                                         // 420\n        } else {                                                                                                      // 421\n            if (text.match(/^\\s*$/g) && current_node().children.length && current_node().lastChild().name === 'br') { // 422\n                return;                                                                                               // 423\n            }                                                                                                         // 424\n            reconstruct_the_active_formatting_elements();                                                             // 425\n            trimmedText = trim_to_1_space(paragraphs[0]);                                                             // 426\n            current_node().appendChild(new TextNode(trimmedText));                                                    // 427\n        }                                                                                                             // 428\n    }                                                                                                                 // 429\n                                                                                                                      // 430\n    var InBody = {                                                                                                    // 431\n        insertion_mode_start: function (tagName, attrs) {                                                             // 432\n            var node;                                                                                                 // 433\n            tagName = tagName.toLowerCase();                                                                          // 434\n            if (withoutTags[tagName]) {                                                                               // 435\n                return;                                                                                               // 436\n            }                                                                                                         // 437\n            if (preferStrong_Em) {                                                                                    // 438\n                switch (tagName) {                                                                                    // 439\n                    case 'b':                                                                                         // 440\n                        start('strong');                                                                              // 441\n                        return;                                                                                       // 442\n                    case 'i':                                                                                         // 443\n                        start('em');                                                                                  // 444\n                        return;                                                                                       // 445\n                }                                                                                                     // 446\n            } else if (preferB_I) {                                                                                   // 447\n                switch (tagName) {                                                                                    // 448\n                    case 'strong':                                                                                    // 449\n                        start('b');                                                                                   // 450\n                        return;                                                                                       // 451\n                    case 'em':                                                                                        // 452\n                        start('i');                                                                                   // 453\n                        return;                                                                                       // 454\n                }                                                                                                     // 455\n            }                                                                                                         // 456\n            switch (tagName) {                                                                                        // 457\n                case 'h1':                                                                                            // 458\n                case 'h2':                                                                                            // 459\n                case 'h3':                                                                                            // 460\n                case 'h4':                                                                                            // 461\n                case 'h5':                                                                                            // 462\n                case 'h6':                                                                                            // 463\n                case 'h7':                                                                                            // 464\n                    if (!allowHeaders) {                                                                              // 465\n                        start('p');                                                                                   // 466\n                        if (preferB_I) {                                                                              // 467\n                            start('b');                                                                               // 468\n                        } else {                                                                                      // 469\n                            start('strong');                                                                          // 470\n                        }                                                                                             // 471\n                        return;                                                                                       // 472\n                    }                                                                                                 // 473\n                case 'blockquote':                                                                                    // 474\n                case 'ol':                                                                                            // 475\n                case 'p':                                                                                             // 476\n                case 'ul':                                                                                            // 477\n                case 'pre': // Techically PRE shouldn't be in this groups, since newlines should be ignored after a pre tag\n                    if (in_scope('p')) {                                                                              // 479\n                        end('p');                                                                                     // 480\n                    }                                                                                                 // 481\n                    insert_html_element_for(tagName, attrs);                                                          // 482\n                    return;                                                                                           // 483\n                case 'li':                                                                                            // 484\n                    if (in_scope('p')) {                                                                              // 485\n                        end('p');                                                                                     // 486\n                    }                                                                                                 // 487\n                    node = current_node();                                                                            // 488\n                    while (node.name === 'li') {                                                                      // 489\n                        stack.pop();                                                                                  // 490\n                    }                                                                                                 // 491\n                    insert_html_element_for(tagName, attrs);                                                          // 492\n                    return;                                                                                           // 493\n                case 'a':                                                                                             // 494\n                    for (var i = active_elements.length; i > 0; i--) {                                                // 495\n                        if (active_elements[i - 1].name === 'a') {                                                    // 496\n                            end('a');                                                                                 // 497\n                            active_elements.splice(i - 1, 1);                                                         // 498\n                        }                                                                                             // 499\n                    }                                                                                                 // 500\n                    reconstruct_the_active_formatting_elements();                                                     // 501\n                    node = insert_html_element_for(tagName, attrs);                                                   // 502\n                    active_elements.push(node);                                                                       // 503\n                    return;                                                                                           // 504\n                case 'strong':                                                                                        // 505\n                case 'b':                                                                                             // 506\n                case 'em':                                                                                            // 507\n                case 'i':                                                                                             // 508\n                case 'u':                                                                                             // 509\n                case 'span':                                                                                          // 510\n                    reconstruct_the_active_formatting_elements();                                                     // 511\n                    node = insert_html_element_for(tagName, attrs);                                                   // 512\n                    active_elements.push(node);                                                                       // 513\n                    return;                                                                                           // 514\n                case 'table':                                                                                         // 515\n                    if (in_scope('p')) {                                                                              // 516\n                        end('p');                                                                                     // 517\n                    }                                                                                                 // 518\n                    insert_html_element_for(tagName, attrs);                                                          // 519\n                    insertion_mode = InTable;                                                                         // 520\n                    return;                                                                                           // 521\n                case 'br':                                                                                            // 522\n                case 'img':                                                                                           // 523\n                    reconstruct_the_active_formatting_elements();                                                     // 524\n                    insert_html_element_for(tagName, attrs);                                                          // 525\n                    stack.pop();                                                                                      // 526\n                    return;                                                                                           // 527\n            }                                                                                                         // 528\n            if (customTags[tagName]) {                                                                                // 529\n                if (selfClosing[tagName]) {                                                                           // 530\n                    reconstruct_the_active_formatting_elements();                                                     // 531\n                    insert_html_element_for(tagName, attrs);                                                          // 532\n                    stack.pop();                                                                                      // 533\n                    return;                                                                                           // 534\n                } else {                                                                                              // 535\n                    reconstruct_the_active_formatting_elements();                                                     // 536\n                    node = insert_html_element_for(tagName, attrs);                                                   // 537\n                    active_elements.push(node);                                                                       // 538\n                    return;                                                                                           // 539\n                }                                                                                                     // 540\n            }                                                                                                         // 541\n        },                                                                                                            // 542\n                                                                                                                      // 543\n        insertion_mode_end: function (tagName) {                                                                      // 544\n            if (typeof tagName === 'undefined') {                                                                     // 545\n                return;                                                                                               // 546\n            }                                                                                                         // 547\n            var node;                                                                                                 // 548\n            tagName = tagName.toLowerCase();                                                                          // 549\n            if (!withoutTags[tagName]) {                                                                              // 550\n                if (preferStrong_Em) {                                                                                // 551\n                    switch (tagName) {                                                                                // 552\n                        case 'b':                                                                                     // 553\n                            end('strong');                                                                            // 554\n                            return;                                                                                   // 555\n                        case 'i':                                                                                     // 556\n                            end('em');                                                                                // 557\n                            return;                                                                                   // 558\n                    }                                                                                                 // 559\n                } else if (preferB_I) {                                                                               // 560\n                    switch (tagName) {                                                                                // 561\n                        case 'strong':                                                                                // 562\n                            end('b');                                                                                 // 563\n                            return;                                                                                   // 564\n                        case 'em':                                                                                    // 565\n                            end('i');                                                                                 // 566\n                            return;                                                                                   // 567\n                    }                                                                                                 // 568\n                }                                                                                                     // 569\n                switch (tagName) {                                                                                    // 570\n                    case 'h1':                                                                                        // 571\n                    case 'h2':                                                                                        // 572\n                    case 'h3':                                                                                        // 573\n                    case 'h4':                                                                                        // 574\n                    case 'h5':                                                                                        // 575\n                    case 'h6':                                                                                        // 576\n                    case 'h7':                                                                                        // 577\n                        if (!allowHeaders) {                                                                          // 578\n                            if (preferB_I) {                                                                          // 579\n                                end('b');                                                                             // 580\n                            } else {                                                                                  // 581\n                                end('strong');                                                                        // 582\n                            }                                                                                         // 583\n                            end('p');                                                                                 // 584\n                            return;                                                                                   // 585\n                        }                                                                                             // 586\n                        if (in_scope(tagName)) {                                                                      // 587\n                            generate_implied_end_tags();                                                              // 588\n                            do {                                                                                      // 589\n                                node = stack.pop();                                                                   // 590\n                            } while (node.name !== tagName);                                                          // 591\n                        }                                                                                             // 592\n                        return;                                                                                       // 593\n                    case 'blockquote':                                                                                // 594\n                    case 'ol':                                                                                        // 595\n                    case 'ul':                                                                                        // 596\n                    case 'pre': // Techically PRE shouldn't be in this groups, since newlines should be ignored after a pre tag\n                        if (in_scope(tagName)) {                                                                      // 598\n                            generate_implied_end_tags();                                                              // 599\n                        }                                                                                             // 600\n                        if (in_scope(tagName)) {                                                                      // 601\n                            do {                                                                                      // 602\n                                node = stack.pop();                                                                   // 603\n                            } while (node.name !== tagName);                                                          // 604\n                        }                                                                                             // 605\n                        return;                                                                                       // 606\n                    case 'p':                                                                                         // 607\n                        if (in_scope(tagName)) {                                                                      // 608\n                            generate_implied_end_tags(tagName);                                                       // 609\n                        }                                                                                             // 610\n                        var no_p_in_scope = true;                                                                     // 611\n                        while (in_scope(tagName)) {                                                                   // 612\n                            no_p_in_scope = false;                                                                    // 613\n                            node = stack.pop();                                                                       // 614\n                        }                                                                                             // 615\n                        if (no_p_in_scope) {                                                                          // 616\n                            start('p', [], false);                                                                    // 617\n                            end('p');                                                                                 // 618\n                        }                                                                                             // 619\n                        return;                                                                                       // 620\n                    case 'li':                                                                                        // 621\n                        if (in_scope(tagName)) {                                                                      // 622\n                            generate_implied_end_tags(tagName);                                                       // 623\n                        }                                                                                             // 624\n                        if (in_scope(tagName)) {                                                                      // 625\n                            do {                                                                                      // 626\n                                node = stack.pop();                                                                   // 627\n                            } while (node.name !== tagName);                                                          // 628\n                        }                                                                                             // 629\n                        return;                                                                                       // 630\n                    case 'a':                                                                                         // 631\n                    case 'i':                                                                                         // 632\n                    case 'em':                                                                                        // 633\n                    case 'strong':                                                                                    // 634\n                    case 'b':                                                                                         // 635\n                    case 'u':                                                                                         // 636\n                    case 'span':                                                                                      // 637\n                        for (var i = active_elements.length; i > 0; i--) {                                            // 638\n                            if (active_elements[i - 1].name === tagName) {                                            // 639\n                                node = active_elements[i - 1];                                                        // 640\n                                break;                                                                                // 641\n                            }                                                                                         // 642\n                        }                                                                                             // 643\n                        if (typeof(node) === 'undefined' || !_.contains(stack, node)) {                               // 644\n                            return;                                                                                   // 645\n                        }                                                                                             // 646\n                        // Step 2 from the algorithm in the HTML5 spec will never be necessary with the tags we allow // 647\n                        var popped_node;                                                                              // 648\n                        do {                                                                                          // 649\n                            popped_node = stack.pop();                                                                // 650\n                        } while (popped_node !== node);                                                               // 651\n                        active_elements.splice(i - 1, 1);                                                             // 652\n                        return;                                                                                       // 653\n                                                                                                                      // 654\n                }                                                                                                     // 655\n                if (customTags[tagName] && !selfClosing[tagName]) {                                                   // 656\n                    for (var i = active_elements.length; i > 0; i--) {                                                // 657\n                        if (active_elements[i - 1].name === tagName) {                                                // 658\n                            node = active_elements[i - 1];                                                            // 659\n                            break;                                                                                    // 660\n                        }                                                                                             // 661\n                    }                                                                                                 // 662\n                    if (typeof(node) === 'undefined' || !_.contains(stack, node)) {                                   // 663\n                        return;                                                                                       // 664\n                    }                                                                                                 // 665\n                    // Step 2 from the algorithm in the HTML5 spec will never be necessary with the tags we allow     // 666\n                    var popped_node;                                                                                  // 667\n                    do {                                                                                              // 668\n                        popped_node = stack.pop();                                                                    // 669\n                    } while (popped_node !== node);                                                                   // 670\n                    active_elements.splice(i - 1, 1);                                                                 // 671\n                    return;                                                                                           // 672\n                }                                                                                                     // 673\n            }                                                                                                         // 674\n            node = current_node();                                                                                    // 675\n            if (node.name === tagName) {                                                                              // 676\n                generate_implied_end_tags();                                                                          // 677\n                while (stack.length > 0 && node !== current_node()) {                                                 // 678\n                    stack.pop();                                                                                      // 679\n                }                                                                                                     // 680\n            }                                                                                                         // 681\n        }                                                                                                             // 682\n    };                                                                                                                // 683\n                                                                                                                      // 684\n    var InTable = {                                                                                                   // 685\n        insertion_mode_start: function (tagName, attrs, unary) {                                                      // 686\n            tagName = tagName.toLowerCase();                                                                          // 687\n            switch (tagName) {                                                                                        // 688\n                case 'caption':                                                                                       // 689\n                    clear_stack_to_table_context();                                                                   // 690\n                    active_elements.push(insert_html_element_for(tagName, attrs));                                    // 691\n                    insertion_mode = InCaption;                                                                       // 692\n                    return;                                                                                           // 693\n                case 'colgroup':                                                                                      // 694\n                    clear_stack_to_table_context();                                                                   // 695\n                    insert_html_element_for(tagName, attrs);                                                          // 696\n                    insertion_mode = InColumnGroup;                                                                   // 697\n                    return;                                                                                           // 698\n                case 'col':                                                                                           // 699\n                    start('colgroup');                                                                                // 700\n                    start(tagName, attrs, unary);                                                                     // 701\n                    return;                                                                                           // 702\n                case 'tbody':                                                                                         // 703\n                case 'tfoot':                                                                                         // 704\n                case 'thead':                                                                                         // 705\n                    clear_stack_to_table_context();                                                                   // 706\n                    insert_html_element_for(tagName, attrs);                                                          // 707\n                    insertion_mode = InTableBody;                                                                     // 708\n                    return;                                                                                           // 709\n                case 'td':                                                                                            // 710\n                case 'th':                                                                                            // 711\n                case 'tr':                                                                                            // 712\n                    start('tbody');                                                                                   // 713\n                    start(tagName, attrs, unary);                                                                     // 714\n                    return;                                                                                           // 715\n            }                                                                                                         // 716\n        },                                                                                                            // 717\n                                                                                                                      // 718\n        insertion_mode_end: function (tagName) {                                                                      // 719\n            if (typeof(tagName) === undefined) {                                                                      // 720\n                return;                                                                                               // 721\n            }                                                                                                         // 722\n            tagName = tagName.toLowerCase();                                                                          // 723\n            switch (tagName) {                                                                                        // 724\n                case 'table':                                                                                         // 725\n                    if (in_table_scope('table')) {                                                                    // 726\n                        var node;                                                                                     // 727\n                        do {                                                                                          // 728\n                            node = stack.pop();                                                                       // 729\n                        } while (node.name !== 'table');                                                              // 730\n                    }                                                                                                 // 731\n                    reset_insertion_mode();                                                                           // 732\n                    return;                                                                                           // 733\n            }                                                                                                         // 734\n        }                                                                                                             // 735\n    };                                                                                                                // 736\n                                                                                                                      // 737\n    var InCaption = {                                                                                                 // 738\n        insertion_mode_start: function (tagName, attrs, unary) {                                                      // 739\n            tagName = tagName.toLowerCase();                                                                          // 740\n            switch (tagName) {                                                                                        // 741\n                case 'caption':                                                                                       // 742\n                case 'col':                                                                                           // 743\n                case 'colgroup':                                                                                      // 744\n                case 'tbody':                                                                                         // 745\n                case 'td':                                                                                            // 746\n                case 'tfoot':                                                                                         // 747\n                case 'th':                                                                                            // 748\n                case 'thead':                                                                                         // 749\n                case 'tr':                                                                                            // 750\n                    end('caption');                                                                                   // 751\n                    start(tagName);                                                                                   // 752\n                    return;                                                                                           // 753\n                default:                                                                                              // 754\n                    InBody.insertion_mode_start(tagName, attrs, unary);                                               // 755\n                    return;                                                                                           // 756\n            }                                                                                                         // 757\n        },                                                                                                            // 758\n                                                                                                                      // 759\n        insertion_mode_end: function (tagName) {                                                                      // 760\n            if (typeof(tagName) === undefined) {                                                                      // 761\n                return;                                                                                               // 762\n            }                                                                                                         // 763\n            tagName = tagName.toLowerCase();                                                                          // 764\n            switch (tagName) {                                                                                        // 765\n                case 'caption':                                                                                       // 766\n                    if (in_table_scope('caption')) {                                                                  // 767\n                        generate_implied_end_tags();                                                                  // 768\n                        if (current_node().name === 'caption') {                                                      // 769\n                            var node;                                                                                 // 770\n                            do {                                                                                      // 771\n                                node = stack.pop();                                                                   // 772\n                            } while (node.name !== 'caption');                                                        // 773\n                            clear_active_elements_to_last_marker();                                                   // 774\n                            insertion_mode = InTable;                                                                 // 775\n                        }                                                                                             // 776\n                    }                                                                                                 // 777\n                    return;                                                                                           // 778\n                case \"body\":                                                                                          // 779\n                case \"col\":                                                                                           // 780\n                case \"colgroup\":                                                                                      // 781\n                case \"html\":                                                                                          // 782\n                case \"tbody\":                                                                                         // 783\n                case \"td\":                                                                                            // 784\n                case \"tfoot\":                                                                                         // 785\n                case \"th\":                                                                                            // 786\n                case \"thead\":                                                                                         // 787\n                case \"tr\":                                                                                            // 788\n                    return;                                                                                           // 789\n                case 'table':                                                                                         // 790\n                    end('caption');                                                                                   // 791\n                    end('table');                                                                                     // 792\n                    return;                                                                                           // 793\n                default:                                                                                              // 794\n                    InBody.insertion_mode_end(tagName);                                                               // 795\n                    return;                                                                                           // 796\n            }                                                                                                         // 797\n        }                                                                                                             // 798\n    };                                                                                                                // 799\n                                                                                                                      // 800\n    var InColumnGroup = {                                                                                             // 801\n        insertion_mode_start: function (tagName, attrs, unary) {                                                      // 802\n            tagName = tagName.toLowerCase();                                                                          // 803\n            switch (tagName) {                                                                                        // 804\n                case 'html':                                                                                          // 805\n                    InBody.insertion_mode_start(tagName, attrs, unary);                                               // 806\n                    return;                                                                                           // 807\n                case 'col':                                                                                           // 808\n                    insert_html_element_for(tagName, attrs);                                                          // 809\n                    stack.pop();                                                                                      // 810\n                    return;                                                                                           // 811\n                default:                                                                                              // 812\n                    end('colgroup');                                                                                  // 813\n                    start(tagName);                                                                                   // 814\n                    return;                                                                                           // 815\n            }                                                                                                         // 816\n        },                                                                                                            // 817\n                                                                                                                      // 818\n        insertion_mode_end: function (tagName) {                                                                      // 819\n            if (typeof(tagName) === undefined) {                                                                      // 820\n                return;                                                                                               // 821\n            }                                                                                                         // 822\n            tagName = tagName.toLowerCase();                                                                          // 823\n            switch (tagName) {                                                                                        // 824\n                case 'colgroup':                                                                                      // 825\n                    if (current_node().name !== 'html') {                                                             // 826\n                        stack.pop();                                                                                  // 827\n                        insertion_mode = InTable;                                                                     // 828\n                    }                                                                                                 // 829\n                    return;                                                                                           // 830\n                case 'col':                                                                                           // 831\n                    return;                                                                                           // 832\n                default:                                                                                              // 833\n                    end('colgroup');                                                                                  // 834\n                    end(tagName);                                                                                     // 835\n                    return;                                                                                           // 836\n            }                                                                                                         // 837\n        }                                                                                                             // 838\n    };                                                                                                                // 839\n                                                                                                                      // 840\n    var InTableBody = {                                                                                               // 841\n        insertion_mode_start: function (tagName, attrs, unary) {                                                      // 842\n            tagName = tagName.toLowerCase();                                                                          // 843\n            switch (tagName) {                                                                                        // 844\n                case 'tr':                                                                                            // 845\n                    clear_stack_to_table_body_context();                                                              // 846\n                    insert_html_element_for(tagName, attrs);                                                          // 847\n                    insertion_mode = InRow;                                                                           // 848\n                    return;                                                                                           // 849\n                case 'th':                                                                                            // 850\n                case 'td':                                                                                            // 851\n                    start('tr');                                                                                      // 852\n                    start(tagName, attrs, unary);                                                                     // 853\n                    return;                                                                                           // 854\n                case \"caption\":                                                                                       // 855\n                case \"col\":                                                                                           // 856\n                case \"colgroup\":                                                                                      // 857\n                case \"tbody\":                                                                                         // 858\n                case \"tfoot\":                                                                                         // 859\n                case \"thead\":                                                                                         // 860\n                    if (in_table_scope('tbody') || in_table_scope('thead') || in_table_scope('tfoot')) {              // 861\n                        clear_stack_to_table_body_context();                                                          // 862\n                        end(current_node().name);                                                                     // 863\n                        start(tagName, attrs, unary);                                                                 // 864\n                    }                                                                                                 // 865\n                    return;                                                                                           // 866\n            }                                                                                                         // 867\n        },                                                                                                            // 868\n                                                                                                                      // 869\n        insertion_mode_end: function (tagName) {                                                                      // 870\n            if (typeof(tagName) === undefined) {                                                                      // 871\n                return;                                                                                               // 872\n            }                                                                                                         // 873\n            tagName = tagName.toLowerCase();                                                                          // 874\n            switch (tagName) {                                                                                        // 875\n                case 'tbody':                                                                                         // 876\n                case 'tfoot':                                                                                         // 877\n                case 'thead':                                                                                         // 878\n                    if (in_table_scope(tagName)) {                                                                    // 879\n                        clear_stack_to_table_body_context();                                                          // 880\n                        stack.pop();                                                                                  // 881\n                        insertion_mode = InTable;                                                                     // 882\n                    }                                                                                                 // 883\n                    return;                                                                                           // 884\n                case 'table':                                                                                         // 885\n                    if (in_table_scope('tbody') || in_table_scope('thead') || in_table_scope('tfoot')) {              // 886\n                        clear_stack_to_table_body_context();                                                          // 887\n                        end(current_node().name);                                                                     // 888\n                        end(tagName);                                                                                 // 889\n                    }                                                                                                 // 890\n                    return;                                                                                           // 891\n                case \"body\":                                                                                          // 892\n                case \"caption\":                                                                                       // 893\n                case \"col\":                                                                                           // 894\n                case \"colgroup\":                                                                                      // 895\n                case \"html\":                                                                                          // 896\n                case \"td\":                                                                                            // 897\n                case \"th\":                                                                                            // 898\n                case \"tr\":                                                                                            // 899\n                    return;                                                                                           // 900\n                default:                                                                                              // 901\n                    InTable.insertion_mode_end(tagName);                                                              // 902\n                    return;                                                                                           // 903\n            }                                                                                                         // 904\n        }                                                                                                             // 905\n    };                                                                                                                // 906\n                                                                                                                      // 907\n    var InRow = {                                                                                                     // 908\n        insertion_mode_start: function (tagName, attrs, unary) {                                                      // 909\n            tagName = tagName.toLowerCase();                                                                          // 910\n            switch (tagName) {                                                                                        // 911\n                case 'th':                                                                                            // 912\n                case 'td':                                                                                            // 913\n                    clear_stack_to_table_row_context();                                                               // 914\n                    var node = insert_html_element_for(tagName, attrs);                                               // 915\n                    insertion_mode = InCell;                                                                          // 916\n                    active_elements.push(node);                                                                       // 917\n                    return;                                                                                           // 918\n                case \"caption\":                                                                                       // 919\n                case \"col\":                                                                                           // 920\n                case \"colgroup\":                                                                                      // 921\n                case \"tbody\":                                                                                         // 922\n                case \"tfoot\":                                                                                         // 923\n                case \"thead\":                                                                                         // 924\n                case \"tr\":                                                                                            // 925\n                    end('tr');                                                                                        // 926\n                    start(tagName, attrs, unary);                                                                     // 927\n                    return;                                                                                           // 928\n                default:                                                                                              // 929\n                    InTable.insertion_mode_start(tagName, attrs, unary);                                              // 930\n                    return;                                                                                           // 931\n            }                                                                                                         // 932\n        },                                                                                                            // 933\n                                                                                                                      // 934\n        insertion_mode_end: function (tagName) {                                                                      // 935\n            if (typeof(tagName) === undefined) {                                                                      // 936\n                return;                                                                                               // 937\n            }                                                                                                         // 938\n            tagName = tagName.toLowerCase();                                                                          // 939\n            switch (tagName) {                                                                                        // 940\n                case 'tr':                                                                                            // 941\n                    if (in_table_scope(tagName)) {                                                                    // 942\n                        clear_stack_to_table_row_context();                                                           // 943\n                        stack.pop();                                                                                  // 944\n                        insertion_mode = InTableBody;                                                                 // 945\n                    }                                                                                                 // 946\n                    return;                                                                                           // 947\n                case 'table':                                                                                         // 948\n                    end('tr');                                                                                        // 949\n                                                                                                                      // 950\n                    // this line was in the original source but attrs/unary are not defined                           // 951\n                    // so not sure what to do with it. how was this working?                                          // 952\n                    // start(tagName, attrs, unary);                                                                  // 953\n                    return;                                                                                           // 954\n                case \"tbody\":                                                                                         // 955\n                case \"tfoot\":                                                                                         // 956\n                case \"thead\":                                                                                         // 957\n                    if (in_table_scope(tagName)) {                                                                    // 958\n                        end('tr');                                                                                    // 959\n                        end(tagName);                                                                                 // 960\n                    }                                                                                                 // 961\n                    return;                                                                                           // 962\n                case \"body\":                                                                                          // 963\n                case \"caption\":                                                                                       // 964\n                case \"col\":                                                                                           // 965\n                case \"colgroup\":                                                                                      // 966\n                case \"html\":                                                                                          // 967\n                case \"td\":                                                                                            // 968\n                case \"th\":                                                                                            // 969\n                    return;                                                                                           // 970\n                default:                                                                                              // 971\n                    InTable.insertion_mode_end(tagName);                                                              // 972\n                    return;                                                                                           // 973\n            }                                                                                                         // 974\n        }                                                                                                             // 975\n    };                                                                                                                // 976\n                                                                                                                      // 977\n    var InCell = {                                                                                                    // 978\n        insertion_mode_start: function (tagName, attrs, unary) {                                                      // 979\n            tagName = tagName.toLowerCase();                                                                          // 980\n            switch (tagName) {                                                                                        // 981\n                case \"caption\":                                                                                       // 982\n                case \"col\":                                                                                           // 983\n                case \"colgroup\":                                                                                      // 984\n                case \"tbody\":                                                                                         // 985\n                case \"td\":                                                                                            // 986\n                case \"tfoot\":                                                                                         // 987\n                case \"th\":                                                                                            // 988\n                case \"thead\":                                                                                         // 989\n                case \"tr\":                                                                                            // 990\n                    if (in_table_scope('td') || in_table_scope('th')) {                                               // 991\n                        close_the_cell();                                                                             // 992\n                        start(tagName, attrs, unary);                                                                 // 993\n                    }                                                                                                 // 994\n                    return;                                                                                           // 995\n                default:                                                                                              // 996\n                    InBody.insertion_mode_start(tagName, attrs, unary);                                               // 997\n                    return;                                                                                           // 998\n            }                                                                                                         // 999\n        },                                                                                                            // 1000\n                                                                                                                      // 1001\n        insertion_mode_end: function (tagName) {                                                                      // 1002\n            if (typeof(tagName) === undefined) {                                                                      // 1003\n                return;                                                                                               // 1004\n            }                                                                                                         // 1005\n            tagName = tagName.toLowerCase();                                                                          // 1006\n            switch (tagName) {                                                                                        // 1007\n                case \"td\":                                                                                            // 1008\n                case \"th\":                                                                                            // 1009\n                    if (in_table_scope(tagName)) {                                                                    // 1010\n                        generate_implied_end_tags();                                                                  // 1011\n                        if (current_node().name !== tagName) {                                                        // 1012\n                            return;                                                                                   // 1013\n                        }                                                                                             // 1014\n                        var node;                                                                                     // 1015\n                        do {                                                                                          // 1016\n                            node = stack.pop();                                                                       // 1017\n                        } while (node.name !== tagName);                                                              // 1018\n                                                                                                                      // 1019\n                        clear_active_elements_to_last_marker();                                                       // 1020\n                        insertion_mode = InRow;                                                                       // 1021\n                    }                                                                                                 // 1022\n                    return;                                                                                           // 1023\n                case \"body\":                                                                                          // 1024\n                case \"caption\":                                                                                       // 1025\n                case \"col\":                                                                                           // 1026\n                case \"colgroup\":                                                                                      // 1027\n                case \"html\":                                                                                          // 1028\n                    return;                                                                                           // 1029\n                case \"table\":                                                                                         // 1030\n                case \"tbody\":                                                                                         // 1031\n                case \"tfoot\":                                                                                         // 1032\n                case \"thead\":                                                                                         // 1033\n                case \"tr\":                                                                                            // 1034\n                    if (in_table_scope(tagName)) {                                                                    // 1035\n                        close_the_cell();                                                                             // 1036\n                        end(tagName);                                                                                 // 1037\n                    }                                                                                                 // 1038\n                    return;                                                                                           // 1039\n                default:                                                                                              // 1040\n                    InBody.insertion_mode_end(tagName);                                                               // 1041\n                    return;                                                                                           // 1042\n            }                                                                                                         // 1043\n        }                                                                                                             // 1044\n    };                                                                                                                // 1045\n                                                                                                                      // 1046\n    init(settings);                                                                                                   // 1047\n                                                                                                                      // 1048\n    return {                                                                                                          // 1049\n        start: start,                                                                                                 // 1050\n        end: end,                                                                                                     // 1051\n        chars: chars,                                                                                                 // 1052\n        getResult: function(){                                                                                        // 1053\n            return noTextManhandle? root.innerHTML() : root.innerHTML().replace(/^\\s+/, '');                          // 1054\n        }                                                                                                             // 1055\n    };                                                                                                                // 1056\n                                                                                                                      // 1057\n};                                                                                                                    // 1058\n                                                                                                                      // 1059\n                                                                                                                      // 1060\nvar allowed_attributes = {};                                                                                          // 1061\nvar customTags = {};                                                                                                  // 1062\nvar selfClosing = {};                                                                                                 // 1063\n                                                                                                                      // 1064\n/* global UniHTML: true */                                                                                            // 1065\nUniHTML = {                                                                                                           // 1066\n    /**                                                                                                               // 1067\n     * Parse html string and calls callback in the same order as tags in html string are present.                     // 1068\n     * Method supports html5, including custom tags.                                                                  // 1069\n     * @param html                                                                                                    // 1070\n     * @param handler {Object} object of callbacks for example:                                                       // 1071\n     * {                                                                                                              // 1072\n     *          // attributesOnTag is an Object like {name, value, escaped}                                           // 1073\n     *      start: function(tagName, attributesOnTag, isSelfClosing), // open tag                                     // 1074\n     *      end: function(tagName), // close                                                                          // 1075\n     *      chars: function(text), // text between open and closing tag                                               // 1076\n     *      comment: function(text) // text from comment                                                              // 1077\n     * }                                                                                                              // 1078\n     * @throws Parse Error                                                                                            // 1079\n     */                                                                                                               // 1080\n    parse: HTMLParser,                                                                                                // 1081\n    /**                                                                                                               // 1082\n     * Cleanup dirty html from unknown/untrusted tags                                                                 // 1083\n     * @param html {string} html string to purify                                                                     // 1084\n     * @param settings {Object} noFormatting, preferStrong_Em, preferB_I, noHeaders, withoutTags                      // 1085\n     * @returns {HTML|string|void}                                                                                    // 1086\n     */                                                                                                               // 1087\n    purify: function (html, settings) {                                                                               // 1088\n        if (typeof settings !== 'object') {                                                                           // 1089\n            settings = {};                                                                                            // 1090\n        }                                                                                                             // 1091\n        settings = _.extend({                                                                                         // 1092\n            allowed_attributes: allowed_attributes,                                                                   // 1093\n            customTags: customTags,                                                                                   // 1094\n            selfClosingTags: selfClosing                                                                              // 1095\n        }, settings);                                                                                                 // 1096\n        var purifierInstance = htmlPurifier(settings);                                                                // 1097\n        try {                                                                                                         // 1098\n            HTMLParser(html, {                                                                                        // 1099\n                start: purifierInstance.start,                                                                        // 1100\n                end: purifierInstance.end,                                                                            // 1101\n                chars: purifierInstance.chars                                                                         // 1102\n            });                                                                                                       // 1103\n        } catch (e) {                                                                                                 // 1104\n            if (!settings.catchErrors) {                                                                              // 1105\n                throw e;                                                                                              // 1106\n            }                                                                                                         // 1107\n        }                                                                                                             // 1108\n        return purifierInstance.getResult();                                                                          // 1109\n    },                                                                                                                // 1110\n    /**                                                                                                               // 1111\n     * Sets new default allowed attributes for one or all tags                                                        // 1112\n     * (it can be overridden by setting 'allowed_attributes' in purify)                                               // 1113\n     * @param attributesArray {Array} Array of names of attributes                                                    // 1114\n     * @param tag {string=} [tag=all_elements]                                                                        // 1115\n     */                                                                                                               // 1116\n    setNewAllowedAttributes: function (attributesArray, tag) {                                                        // 1117\n        if (!tag) {                                                                                                   // 1118\n            tag = 'all_elements';                                                                                     // 1119\n        }                                                                                                             // 1120\n        if (!attributesArray) {                                                                                       // 1121\n            attributesArray = [];                                                                                     // 1122\n        }                                                                                                             // 1123\n        if (typeof attributesArray === 'string') {                                                                    // 1124\n            attributesArray = [attributesArray];                                                                      // 1125\n        }                                                                                                             // 1126\n        allowed_attributes[tag] = attributesArray;                                                                    // 1127\n    },                                                                                                                // 1128\n    /**                                                                                                               // 1129\n     * Adds new default allowed html tag                                                                              // 1130\n     * (it can be overridden by settings 'customTags', 'selfClosingTags' in purify method)                            // 1131\n     * @param tagName {string}                                                                                        // 1132\n     * @param isSelfClosing {boolean=} a void tags like: img, hr, area                                                // 1133\n     */                                                                                                               // 1134\n    addNewAllowedTag: function (tagName, isSelfClosing) {                                                             // 1135\n        customTags[tagName] = true;                                                                                   // 1136\n        if (isSelfClosing) {                                                                                          // 1137\n            selfClosing[tagName] = true;                                                                              // 1138\n        }                                                                                                             // 1139\n    }                                                                                                                 // 1140\n                                                                                                                      // 1141\n};                                                                                                                    // 1142\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}